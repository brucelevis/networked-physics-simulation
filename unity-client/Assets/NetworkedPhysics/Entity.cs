// automatically generated by the FlatBuffers compiler, do not modify

namespace NetworkedPhysics
{

using System;
using FlatBuffers;

public sealed class Entity : Table {
  public static Entity GetRootAsEntity(ByteBuffer _bb) { return GetRootAsEntity(_bb, new Entity()); }
  public static Entity GetRootAsEntity(ByteBuffer _bb, Entity obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Entity __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int Id { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public EntityType Type { get { int o = __offset(6); return o != 0 ? (EntityType)bb.GetSbyte(o + bb_pos) : EntityType.NONE; } }
  public bool Interacting { get { int o = __offset(8); return o != 0 ? 0!=bb.Get(o + bb_pos) : (bool)false; } }
  public Transform Transform { get { return GetTransform(new Transform()); } }
  public Transform GetTransform(Transform obj) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<Entity> CreateEntity(FlatBufferBuilder builder,
      int id = 0,
      EntityType type = EntityType.NONE,
      bool interacting = false,
      Offset<Transform> transformOffset = default(Offset<Transform>)) {
    builder.StartObject(4);
    Entity.AddTransform(builder, transformOffset);
    Entity.AddId(builder, id);
    Entity.AddInteracting(builder, interacting);
    Entity.AddType(builder, type);
    return Entity.EndEntity(builder);
  }

  public static void StartEntity(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, EntityType type) { builder.AddSbyte(1, (sbyte)type, 0); }
  public static void AddInteracting(FlatBufferBuilder builder, bool interacting) { builder.AddBool(2, interacting, false); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Transform> transformOffset) { builder.AddOffset(3, transformOffset.Value, 0); }
  public static Offset<Entity> EndEntity(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Entity>(o);
  }
};


}

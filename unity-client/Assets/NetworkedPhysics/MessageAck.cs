// automatically generated by the FlatBuffers compiler, do not modify

namespace NetworkedPhysics
{

using System;
using FlatBuffers;

public sealed class MessageAck : Table {
  public static MessageAck GetRootAsMessageAck(ByteBuffer _bb) { return GetRootAsMessageAck(_bb, new MessageAck()); }
  public static MessageAck GetRootAsMessageAck(ByteBuffer _bb, MessageAck obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public MessageAck __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int MessageId { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<MessageAck> CreateMessageAck(FlatBufferBuilder builder,
      int messageId = 0) {
    builder.StartObject(1);
    MessageAck.AddMessageId(builder, messageId);
    return MessageAck.EndMessageAck(builder);
  }

  public static void StartMessageAck(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMessageId(FlatBufferBuilder builder, int messageId) { builder.AddInt(0, messageId, 0); }
  public static Offset<MessageAck> EndMessageAck(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MessageAck>(o);
  }
};


}

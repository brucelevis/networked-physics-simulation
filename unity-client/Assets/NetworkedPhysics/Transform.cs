// automatically generated by the FlatBuffers compiler, do not modify

namespace NetworkedPhysics
{

using System;
using FlatBuffers;

public sealed class Transform : Table {
  public static Transform GetRootAsTransform(ByteBuffer _bb) { return GetRootAsTransform(_bb, new Transform()); }
  public static Transform GetRootAsTransform(ByteBuffer _bb, Transform obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Transform __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Vec3 Position { get { return GetPosition(new Vec3()); } }
  public Vec3 GetPosition(Vec3 obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public Vec4 Rotation { get { return GetRotation(new Vec4()); } }
  public Vec4 GetRotation(Vec4 obj) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public Vec3 Scale { get { return GetScale(new Vec3()); } }
  public Vec3 GetScale(Vec3 obj) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<Transform> CreateTransform(FlatBufferBuilder builder,
      Offset<Vec3> positionOffset = default(Offset<Vec3>),
      Offset<Vec4> rotationOffset = default(Offset<Vec4>),
      Offset<Vec3> scaleOffset = default(Offset<Vec3>)) {
    builder.StartObject(3);
    Transform.AddScale(builder, scaleOffset);
    Transform.AddRotation(builder, rotationOffset);
    Transform.AddPosition(builder, positionOffset);
    return Transform.EndTransform(builder);
  }

  public static void StartTransform(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vec3> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Vec4> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<Vec3> scaleOffset) { builder.AddOffset(2, scaleOffset.Value, 0); }
  public static Offset<Transform> EndTransform(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Transform>(o);
  }
};


}
